name: Build , push and update API in kubernetes

on:
  push:
    branches: [ "main" ]
    paths-ignore:
      - 'api-helm/**'


env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: docker.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: abamboi/economic-api
  
jobs:            
  build_push_image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        id: checkout_repo
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v2
        id: setup_docker
      - name: Log into registry ${{ env.REGISTRY }}
        id: login_docker
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch,suffix=-{{sha}}-{{date 'YYYYMMDD'}}
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v3
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }} 
    outputs:
      pushed_tags: ${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}

  scan_image:
    runs-on: ubuntu-latest
    needs: build_push_image
    steps:
      # Build temp image locally to be scanned        
      - name: Pull image to be scanned
        id: pull_image
        run:   |
          docker login --username  ${{ secrets.DOCKERHUB_USERNAME }} --password ${{ secrets.DOCKERHUB_TOKEN }}
          export IMAGE_VERSION=$(echo ${{ needs.build_push_image.outputs.pushed_tags }} | grep -v latest | awk '{print $1}' )
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$IMAGE_VERSION
          echo "::set-output name=single_image_id::${IMAGE_VERSION}"

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.pull_image.outputs.single_image_id }}
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          # output: 'trivy-results.sarif'
    outputs:
      scanned_tag: ${{ steps.pull_image.outputs.single_image_id }}

  helm_update:
    runs-on: ubuntu-latest
    if: github.ref_type == 'branch'
    needs: scan_image 
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        id: checkout_helm
      - name: Update Image Version in the related HelmChart values.yaml
        id: update_helm_values
        uses: fjogeleit/yaml-update-action@master
        with:
          valueFile: 'api-helm/values.yaml' # Need to refactor the helm chart and remove the version subdir
          propertyPath: 'api.image.repository'
          value: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.scan_image.outputs.scanned_tag }}
          branch: main
          createPR: false
          message: 'Update Image Version to ${{ needs.scan_image.outputs.scanned_tag }}'
          token: ${{ secrets.HELM_REPO_TOKEN }}
      - name: Update App Version in the related HelmChart Chart.yaml
        id: update_helm_values
        uses: fjogeleit/yaml-update-action@master
        with:
          valueFile: 'api-helm/Chart.yaml' # Need to refactor the helm chart and remove the version subdir
          propertyPath: 'appVersion'
          value: ${{ needs.scan_image.outputs.scanned_tag }}
          branch: main
          createPR: false
          message: 'Update App Version to ${{ needs.scan_image.outputs.scanned_tag }}'
          token: ${{ secrets.HELM_REPO_TOKEN }}

